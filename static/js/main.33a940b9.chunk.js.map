{"version":3,"sources":["Navbar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navbar","_useState","useState","_useState2","Object","slicedToArray","collapsed","setCollapsed","react_default","a","createElement","color","dark","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","isOpen","navbar","Nav","className","NavItem","NavLink","App","window","innerHeight","setInnerHeight","_useState3","innerWidth","_useState4","setInnerWidth","_useState5","outerHeight","_useState6","setOuterHeight","_useState7","outerWidth","_useState8","setOuterWidth","useEffect","resizeListener","addEventListener","removeEventListener","Fragment","Navbar_Navbar","Container","Table","hover","style","width","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.33a940b9.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport {\n  Collapse,\n  Nav,\n  Navbar as BootstrapNavbar,\n  NavbarBrand,\n  NavLink,\n  NavItem,\n  NavbarToggler,\n} from 'reactstrap';\n\nexport default function Navbar() {\n  const [collapsed, setCollapsed] = useState(false);\n\n  return (\n    <BootstrapNavbar color=\"dark\" dark expand=\"md\">\n      <NavbarBrand href=\"https://www.aizatto.com\">aizatto.com</NavbarBrand>\n      <NavbarToggler onClick={() => setCollapsed(!collapsed)} />\n      <Collapse isOpen={collapsed} navbar>\n        <Nav className=\"ml-auto\" navbar>\n          <NavItem>\n            <NavLink href=\"https://www.aizatto.com/\">aizatto.com</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink href=\"https://www.deepthoughtapp.com/\">Deep Thought</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink href=\"https://www.logbook.my/\">Logbook</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink href=\"https://github.com/aizatto/window/\">GitHub</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink href=\"https://www.linkedin.com/in/aizatto\">LinkedIn</NavLink>\n          </NavItem>\n        </Nav>\n      </Collapse>\n    </BootstrapNavbar>\n  );\n}\n","import React, { useState, useEffect, useLayoutEffect } from 'react';\nimport { Container, FormGroup, Label, Col, Table, Input } from 'reactstrap';\nimport Navbar from './Navbar';\n\nimport \"./bootstrap.min.css\";\n\nconst App: React.FC = () => {\n  const [innerHeight, setInnerHeight] = useState(window.innerHeight);\n  const [innerWidth, setInnerWidth] = useState(window.innerWidth);\n  const [outerHeight, setOuterHeight] = useState(window.outerHeight);\n  const [outerWidth, setOuterWidth] = useState(window.outerWidth);\n\n  useEffect(() => {\n    const resizeListener = () => {\n      setInnerHeight(window.innerHeight);\n      setInnerWidth(window.innerWidth);\n      setOuterHeight(window.outerHeight);\n      setOuterWidth(window.outerWidth);\n    }\n\n    window.addEventListener('resize', resizeListener);\n    return () => {\n      window.removeEventListener('resize', resizeListener);\n    };\n  });\n\n\n  return (\n    <>\n      <Navbar />\n      <Container>\n        <Table hover>\n          <thead>\n            <tr>\n              <th style={{width: 200}}>Field</th>\n              <th>Value</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>\n                <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/innerHeight\">\n                  window.innerHeight\n                </a>\n              </td>\n              <td><code>{innerHeight}</code></td>\n            </tr>\n            <tr>\n              <td>\n                <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth\">\n                  window.innerWidth\n                </a>\n              </td>\n              <td><code>{innerWidth}</code></td>\n            </tr>\n            <tr>\n              <td>\n                <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/outerHeight\">\n                  window.outerHeight\n                </a>\n              </td>\n              <td><code>{outerHeight}</code></td>\n            </tr>\n            <tr>\n              <td>\n                <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/outerWidth\">\n                  window.outerWidth\n                </a>\n              </td>\n              <td><code>{outerWidth}</code></td>\n            </tr>\n          </tbody>\n        </Table>\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}